#!/bin/bash

source /usr/lib/ayer/functions.sh

ayer_init

build_commit=$1

[ -n "$build_commit" ] || die "usage: $(basename $0) build_commit"

gerrit_query_change "$build_commit"
build_branch=$CHANGE_BRANCH

upstream=origin/$build_branch
is_acceptable=y
commits_to_submit=

function check_git_project() {
    local project="$1"
    local new_commit="$2"
    cd "$git_dir/${project}.git"
    local cherry=$(git cherry -v "$new_commit" "$upstream")
    if [ -n "$cherry" ]; then
        is_acceptable=n
        echo "$project: cannot fast-forward:" >&2
        echo "$cherry" | sed 's/^/\t/' >&2
    fi
    # to search
    local commits=$(git rev-list "$upstream".."$new_commit" | sort)
    if [ -n "$commits" ]; then
        local query_commits=$(echo "$commits" | sed 's/^/OR commit:/')
        query_commits="${query_commits#OR }"
        local submittable_commits=$(
            gerrit_command query --current-patch-set "($query_commits) AND (is:open $GERRIT_SUBMITTABLE)" |
            grep 'revision:' | while read key value; do echo $value; done | sort)
        if [ "$commits" != "$submittable_commits" ]; then
            is_acceptable=n
            echo "$project: not all commits are submittable:" >&2
            for com in $commits; do
                if [[ "$submittable_commits" != *$com* ]]; then
                    echo -e "\t  $(git log -1 --format=oneline $com)" >&2
                fi
            done
        else
            commits_to_submit="$commits $commits_to_submit"
        fi
    fi
}

git_fetch_repos "$build_commit" >/dev/null
check_git_project "${BASE_PROJECT}" "$build_commit"

git diff-tree -r "$build_commit" | {
    while read mode1 mode2 hash1 hash2 ignored path; do
        if [ "$mode2" == 160000 ]; then
            check_git_project "$(basename "$path")" "$hash2" </dev/null
        fi
    done

    if [ "$is_acceptable" == "y" ]; then
        echo "$commits_to_submit"
    else
        exit 1
    fi
}
